// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// internal/template/boot/boot.tmpl
// internal/template/cmd/apiserver.tmpl
// internal/template/cmd/cobra.tmpl
// internal/template/cmd/rpcserver.tmpl
// internal/template/common/common.tmpl
// internal/template/common/ping.tmpl
// internal/template/config/config.tmpl
// internal/template/global/global.tmpl
// internal/template/internal/route.tmpl
// internal/template/internal/rpcapi.tmpl
// internal/template/main.tmpl
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplateBootBootTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x52\x00\xad\xff\x70\x61\x63\x6b\x61\x67\x65\x20\x62\x6f\x6f\x74\x0a\x0a\x66\x75\x6e\x63\x20\x49\x6e\x69\x74\x28\x29\x20\x7b\x0a\x09\x2f\x2f\x20\xe5\xb0\x86\xe9\x9c\x80\xe8\xa6\x81\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xe5\x9c\xa8\xe8\xaf\xa5\xe5\xa4\x84\xe6\xb3\xa8\xe5\x86\x8c\x20\x54\x4f\x44\x4f\x0a\x7d\x0a\x01\x00\x00\xff\xff\xa8\x42\xb5\x5d\x52\x00\x00\x00")

func internalTemplateBootBootTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateBootBootTmpl,
		"internal/template/boot/boot.tmpl",
	)
}

func internalTemplateBootBootTmpl() (*asset, error) {
	bytes, err := internalTemplateBootBootTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/boot/boot.tmpl", size: 82, mode: os.FileMode(420), modTime: time.Unix(1688218897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCmdApiserverTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5d\x6f\xdc\x44\x14\x7d\xf6\xfc\x8a\x8b\xa5\x54\x76\xb5\x6b\x0b\xf1\xb6\x22\x0f\x28\xe4\x4b\x42\xe9\x2a\xdb\xf2\xd2\x22\x34\xb1\xc7\xde\x51\xec\x19\x33\xbe\xde\x6c\x15\xad\x14\x5a\x68\xa1\xa4\x02\x41\xda\x87\x50\x24\x2a\xf1\x11\xf1\xd0\x14\x15\xa9\x2a\xa2\xf4\xc7\x50\x27\xbb\xff\x02\x8d\xc7\xbb\xd9\x26\xb4\x74\xbb\x0f\xf6\xd8\x73\xe6\xcc\xbd\xe7\x9e\xeb\xd9\x8c\x06\x9b\x34\x66\x40\x33\x4e\x08\x4f\x33\xa9\x10\x1c\x62\xd9\x51\x8a\x36\xb1\x94\x2c\x90\x8b\x18\xec\x98\x63\xb7\xd8\xf0\x02\x99\xfa\x71\x72\xb5\xd9\x2d\x36\xfc\x88\xe6\xd8\x45\xcc\x9a\x35\xc8\x26\x96\xbd\xbd\x0d\x5e\xdb\x30\xae\xd1\x94\xc1\x60\xe0\x73\x81\x4c\x09\x9a\xf8\x1a\xc6\x34\x68\x8a\x0b\x19\x4d\x9b\x21\x15\x21\x4b\xb8\x14\x7e\x2c\xa7\x1e\x68\x96\x25\x3c\xa0\xc8\xa5\x98\x61\x55\x20\x45\xc4\xe3\x19\x16\x24\x32\x8e\x99\x3a\xb5\x60\x9c\x23\x4a\x99\x6c\xc8\xbe\xcf\xb3\xff\x01\xe4\xa8\xb8\x88\xfb\xa7\x50\x79\x16\xbd\xfd\x8e\x1f\xc8\x0d\x45\xf5\x0c\x97\x3e\xd7\x5a\x25\xfa\x41\xe6\xe6\xea\xe7\x3c\x16\x34\xb1\x89\x4b\x48\x8f\x2a\x2d\x3e\x13\x3d\xa8\x7e\x86\x95\x58\x1d\xa4\x0a\x17\xd2\x10\xe6\xe1\x5c\xc5\xe6\x2d\xc8\x34\xa5\x22\xdc\x26\x96\x75\x29\x67\x2d\x98\xfc\xec\x9c\xa9\x1e\x53\x76\x83\x58\x56\xa7\x2b\x15\x4e\xe6\xec\x8a\x05\xde\x6b\xaf\xc2\x14\x66\xb1\x4f\xd3\x2c\x19\x33\x54\x05\xec\x54\xb3\x75\xfd\x6a\x2c\x34\x19\x24\x32\xa0\x89\x21\xe6\x09\x13\x01\xbb\x94\xd3\x98\xb5\x00\x55\xc1\xf4\xdb\xb6\x62\xeb\x85\x68\x41\x54\x88\xc0\x09\xd2\x10\xce\xbf\x10\x6b\x03\xa8\x8a\x73\xb8\xfc\x91\xc9\xca\x05\x1d\xbc\x95\x33\x2c\x32\xc7\x25\x96\x35\xd0\x1c\xeb\x85\x58\x7c\x7d\x06\xa6\x94\x54\x86\x47\x31\x2c\x94\x00\x55\x88\x09\xd9\x40\x4b\xaa\xa9\x80\x0b\x8e\x4e\xb5\xe1\x58\x49\xaf\xcd\x54\xce\x73\x64\x02\x97\x12\x1a\xe7\x8e\xeb\x75\x2a\xd2\x0f\xa9\x6a\x3b\xe7\x98\xe8\x35\xc0\x66\xa2\x67\xeb\x9b\xbe\xd4\xc9\x83\xbd\x28\x7a\xb6\x4b\x06\x35\x73\x1d\xbe\xa6\xf6\x7d\x18\x7d\x7e\xfb\xf8\xe9\x83\xf2\x8b\x1f\xca\x5f\xbf\x2a\x77\xef\x12\xcb\xb8\xd1\x5b\x15\x1c\x17\xaa\xa1\xc3\x44\xcf\xad\xb0\xe5\x9f\x7b\xc7\x7b\x07\x53\xd8\x29\xbf\x57\x0b\x1c\x83\x1b\x3e\x3e\x3c\xde\xfb\x7d\x0a\x57\xf5\x51\x85\x58\xd7\xa3\x1a\x76\xf4\xe8\xa0\xbc\xb1\x5b\xfe\xf4\xc7\xe8\xfa\x41\x20\x05\xb2\x3e\x8e\xbe\xfb\x7b\xf8\xf8\xf0\x45\xe2\x75\x16\xeb\xac\xd5\x0a\xa3\x21\x53\x4b\x5a\xe7\x93\xe1\x49\x5a\x53\xd3\x01\xf6\xe1\x7c\xdd\xe2\xde\x82\x61\x6e\x40\x48\x91\x42\x4a\xb3\xcb\xa6\x14\x93\x8a\x9c\x79\x55\x2b\x33\xbc\xf9\x5b\xf9\x60\xff\xf9\x93\x2f\x4d\x84\x26\xb4\x7f\x76\xae\x0d\x0f\x7f\x3e\xba\xfb\xe4\xe8\xd1\x9d\xe1\xf5\xa7\xe5\xc3\x1b\xa3\x7b\x3b\xc3\x5f\x3e\x3d\xde\xff\xac\xfc\xfa\xda\xd1\x9d\x87\xa3\x9d\xfd\xe1\xb3\x9b\x2a\x0b\x86\xcf\xbe\x1f\xde\xdf\x7d\xfe\xd7\x8f\xa3\x9d\x6f\xe1\xe2\x85\xf7\x2f\x10\x32\xae\xb8\x8e\x64\x12\x77\x55\xfe\x13\x5b\x68\x99\xbf\x39\x2c\x6f\x1d\xe8\xef\xd4\xd1\xbd\xdb\xe5\xad\xfb\xc4\x8a\xa5\xf1\x97\x31\xe0\xb4\x38\x2b\x88\x99\x31\xbf\xb6\x43\x3d\x20\xd6\x40\x5f\x2a\x4d\x05\x36\xe0\x63\x68\xcd\x83\x69\x63\x6f\x9d\xd1\x70\x89\x27\xcc\xb1\x3d\x3f\x47\x8a\x3c\xf0\xcf\x34\x90\x87\x7d\xb4\x5d\x62\x45\x29\x7a\x6d\xc5\x05\x26\xc2\x31\xdf\x1c\x6f\x59\x31\x26\x1c\xa3\x93\x53\x6f\xe0\xba\x2e\xd1\x9d\xf8\x52\xb8\x6d\xd8\x75\xaa\x40\xb1\x65\x9f\xc6\x47\x8e\xdd\x04\xf8\x40\xdb\x55\x37\xb5\xce\xbc\xe5\xfb\x95\x7d\xbb\x32\xc7\xd6\x5c\xe8\xc3\x15\x75\x45\xd8\x0d\x78\x69\xee\x6d\xa9\xd0\xf9\x6f\xe2\x35\x86\x5b\x52\x6d\xb6\xc6\xc4\x73\xf9\x34\x23\xcf\xbc\x65\x86\xd5\xe6\x2b\x32\x47\xc7\x9d\x75\x93\x44\xb7\xaf\x7e\xc3\x23\xa8\x9b\x67\x99\xe1\xa2\xe8\x39\x2e\xbc\x35\x0f\x76\xa6\x64\x58\x04\xd5\x99\x00\xdb\x64\xfc\x69\x7b\x85\x58\x5b\x54\x3f\x9e\x56\x6b\x56\xc5\x68\xc6\xfd\xdc\x50\xf9\x5c\x84\xac\xef\x75\x31\x4d\x66\xd2\xf1\xb5\xb5\x7c\xf5\x5e\x6f\xaa\xf0\x80\x54\xb7\x4f\x0a\x8e\xda\xc0\x29\xdd\x64\x4e\xd0\xa5\x02\x64\xee\x75\xaa\x13\xc8\xe0\xcc\x69\xe4\xad\x49\xe4\xd1\x55\x47\xc3\x1b\x1a\xb2\xaa\x4f\x71\x55\x64\x68\x50\xef\x36\xf5\xcc\x19\x7f\xcc\xe5\xd0\xe9\x16\x18\xca\x2d\x01\xb5\x4d\x3d\xcf\x1b\x87\x5e\x9f\x91\x3a\xfe\x85\x42\x29\x26\xf0\x22\x4f\x59\x07\xd5\x38\xc6\xba\x74\xab\x22\x92\x13\x9b\xb3\x3e\xaf\xfe\x5c\x18\x44\xdd\xf3\x82\x27\x64\x40\xfe\x0d\x00\x00\xff\xff\x4c\xc1\x1d\x3e\xbb\x08\x00\x00")

func internalTemplateCmdApiserverTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCmdApiserverTmpl,
		"internal/template/cmd/apiserver.tmpl",
	)
}

func internalTemplateCmdApiserverTmpl() (*asset, error) {
	bytes, err := internalTemplateCmdApiserverTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/cmd/apiserver.tmpl", size: 2235, mode: os.FileMode(420), modTime: time.Unix(1698637526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCmdCobraTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xbd\x6e\xdb\x30\x10\xc7\x67\xde\x53\x5c\x35\x14\x52\xe1\xc8\x30\xba\xa9\xf5\x10\x04\xde\x8a\xc0\x88\x91\xa9\xe8\xc0\x90\x67\x9a\xa8\x48\xaa\xc7\x53\x1a\x54\xd0\xbb\x17\x94\x5d\x23\x0d\x3a\x75\x24\x7f\xf7\xff\xc0\xdd\xa0\xcd\x77\xed\x08\x4d\xb0\x00\x3e\x0c\x89\x05\x6b\x50\x15\x31\x27\xce\x15\xa8\x6a\x9a\xb0\xdd\x9f\xa7\xee\x75\x20\x9c\xe7\xb5\x09\x76\xad\x07\x5f\xa8\xf3\x72\x1a\x9f\x5a\x93\xc2\x5a\x48\x87\x1b\xab\xa3\xa5\xde\xa7\xb8\x76\xe9\xd5\xa3\x4f\xce\x11\xbf\x11\xe4\xe1\xb8\xf9\xb8\x36\xe9\x89\x75\x21\x29\x57\xd0\x00\x3c\x6b\x46\x4e\x49\xee\x82\xc5\x2d\xbe\x5f\x70\x7b\x97\x42\xd0\xd1\x4e\xa0\x1e\x33\x75\xf8\x8f\x52\xd5\x0a\xd4\xe1\x94\x58\x2e\xf4\x40\xfc\x4c\xfc\x1a\xfa\x9e\xa2\xa1\xc7\xac\x1d\x75\xc2\x23\xad\x40\x7d\x49\xd1\x75\x58\xe9\x51\x4e\x89\xfd\x2f\x2a\x73\xb7\xec\x72\x87\xc7\x31\x9a\xda\x04\x8b\x1f\xfe\x2a\xb0\x42\xcd\x2e\xe3\xd7\x6f\x59\xd8\x47\xd7\xe0\xb2\x27\x9c\x40\x29\x7f\xc4\x9e\x62\x5d\x78\x83\x9f\x71\xb3\x7c\x2a\x26\x19\x39\x9e\xc7\x72\x7b\x4f\x3f\xeb\xf3\x2a\xda\x07\xb2\x75\xc5\xf4\x63\xf4\x4c\x19\xb5\x60\x4f\x3a\x0b\xa6\x48\x25\xa2\x6a\x1a\x50\x6a\x86\xab\x41\xf4\x3d\xa8\x79\x05\x6a\x4f\x9c\x7d\x16\x8a\xb2\x4f\x59\x1e\xc6\xb8\xfb\x9f\xb2\x6f\x5c\x67\x80\xe2\x81\x3e\x7a\xa9\x9b\x09\xd4\xe5\x00\xed\xad\xb5\x17\xb3\x5a\x0f\xbe\x3d\x88\xe6\xf2\xdf\x5c\x15\xbb\x17\x32\xa3\xd0\x22\xf2\xc7\x92\x80\xdd\xf6\xcf\xfd\xda\x2b\xfd\xb4\x90\x77\xdb\x92\x58\xf2\x53\x6e\x77\x2f\x5e\xea\x9b\x4d\x03\x6a\x86\x19\x7e\x07\x00\x00\xff\xff\x58\x7b\x00\xb9\x88\x02\x00\x00")

func internalTemplateCmdCobraTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCmdCobraTmpl,
		"internal/template/cmd/cobra.tmpl",
	)
}

func internalTemplateCmdCobraTmpl() (*asset, error) {
	bytes, err := internalTemplateCmdCobraTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/cmd/cobra.tmpl", size: 648, mode: os.FileMode(420), modTime: time.Unix(1698637526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCmdRpcserverTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\xaf\x1b\x35\x10\x3e\xdb\xbf\x62\x64\x89\xca\x8b\xf2\xbc\x42\xdc\x9e\xe8\x01\x45\xaf\xd5\xbb\x54\x51\x42\xb9\x50\x84\x9c\xcd\xec\xc6\xaa\x77\xbc\x78\x67\xd3\x54\x4f\x39\x22\x21\xa0\xb7\xd2\x13\x1c\x38\xc1\x89\x0b\x27\x90\xf8\x39\x79\x15\xff\x02\x79\xbd\x79\x84\x22\xa4\xd6\x07\x27\xf6\x7c\xf3\xcd\x78\x66\xbe\xed\x6c\xf5\xd4\x36\x08\xb6\x73\x52\xba\xb6\x0b\x91\x41\x4b\xa1\xea\x96\x95\x14\xea\xe6\x06\xcc\x22\x43\x1e\xd9\x16\xe1\x70\x28\xd7\x21\xfc\x9f\xc9\x11\x63\x24\xeb\xcb\x1e\xe3\xce\x55\x98\x60\x8d\xe3\xed\xb0\x36\x55\x68\x4b\x46\xdb\x5e\x6c\x2c\x6d\xd0\xbb\x40\x65\x13\xce\x0e\xb6\xeb\xbc\xab\x2c\xbb\x40\xef\xe0\x55\x05\xaa\x5d\xf3\x0e\x0e\x3e\x34\x0d\xc6\x37\x1c\x1a\xff\xfc\x62\x3b\xac\x4b\x0e\xc1\xaf\xc3\xbe\xec\x39\x3a\x6a\xf6\x6f\xa0\xfa\xae\xfe\xe0\xc3\xb2\x0a\xeb\x68\x93\xc5\x85\xd2\x85\x81\x9d\x4f\x87\xd0\xe7\xbd\xec\x5d\x43\xd6\x2b\x59\x48\xb9\xb3\x31\x55\x12\x69\x07\xe3\xca\xac\x52\xac\xd8\x46\x9e\xb7\x1b\xb8\x0f\xf7\x46\x36\x33\x0f\x6d\x6b\x69\x73\x23\x85\x78\xdc\xe3\x25\xdc\x2d\x95\xea\x88\x51\xcd\xa4\x10\xab\x6d\x88\x7c\x67\x53\x23\x0b\x2c\x17\x73\x38\xc3\x5c\xed\x6d\xdb\xf9\x13\xc3\xd8\xa1\xd5\x68\x9d\x1a\x34\x61\xe1\x02\xc1\x87\xca\xfa\x4c\xec\x3c\x52\x85\x8f\x7b\xdb\xe0\x25\x70\x1c\x30\xdd\x2e\x22\x2e\x07\xba\x84\x7a\xa0\x4a\x57\xed\x06\xde\xff\x57\xae\x33\xb0\xb1\xe9\xe1\xb3\xcf\xf3\xab\x0a\x48\xc9\x8b\x1e\x79\xe8\x74\x21\x85\x38\x24\x8e\xe5\x40\x57\x6f\xcf\x80\x31\x86\x98\x79\x22\xf2\x10\x09\xe2\x40\x77\x64\x87\x54\xd2\x44\x05\x8e\x1c\xeb\x31\xe0\xa9\x92\x66\x81\xb1\x77\x3d\x23\xf1\x03\x6f\x9b\x5e\x17\x66\x35\x92\x7e\x6a\xe3\x42\xdf\x43\xda\xcd\x40\x21\xed\x54\xfa\x49\xdb\xf4\x78\x50\x57\xb4\x53\x85\x3c\x4c\xcc\x53\xfa\x89\xba\x2c\xe1\xaf\xaf\x5e\xbc\xfe\xf3\xd7\xe3\xd7\x3f\x1e\x7f\xfe\xf6\xf8\xdd\x2b\x29\xf2\xb0\x99\x6b\x72\x3c\x1f\xff\x6a\xa4\x5d\x31\x62\x8f\x7f\xbc\x7c\xfd\xf2\x97\x33\xec\xd9\x38\x8f\x0e\x7a\xc2\x9d\x10\xb7\x3f\xbc\x38\x7e\xf3\xd3\xed\xab\xdf\x6f\x7f\xfb\x5e\x8a\x24\xa9\x13\xec\x94\xcc\xf8\xf8\x7f\x8a\x72\xee\x1c\xbb\x0a\xda\xb0\x41\x2f\x45\x13\x72\x7d\x73\x03\xce\xa3\x2e\xbb\x2a\xf7\x5e\x13\x3e\xd3\x93\x20\xd3\xed\xc7\x9d\x2b\x0a\x29\x0e\x29\xa5\x2a\x50\xaa\xda\x0c\xbe\x80\xcb\xfb\x90\xe7\xd9\x2c\xd1\x6e\x1e\x38\x8f\x5a\x99\xb2\x67\xcb\xae\x2a\xff\x33\x49\x86\xf7\xac\x0a\x29\xea\x96\xcd\x22\x3a\x62\x4f\x3a\x6b\xcb\x3c\x8c\x88\xa4\x73\x57\xf5\x14\xa0\x48\x11\xbf\x1c\x1c\xa7\x30\xad\x7d\x8a\xba\xda\x5a\x82\xd0\x9b\xd5\x28\x98\x42\x8a\xac\x1c\xf3\x28\xb0\xab\x9f\xeb\x84\x9d\x25\xfb\x75\xfa\xa4\xc4\xa1\xe3\x42\x8a\x8f\x2e\xd2\xf5\x59\xd0\x5a\xab\xf7\x7a\x58\x6d\x07\xde\x84\x67\x04\x39\x43\x30\xc6\xc0\x93\xf8\x84\xd4\x6c\xd2\xdc\xde\x3c\x44\x9e\x0f\x31\x22\xf1\x27\xae\xc5\x15\x47\x5d\x14\x32\x69\x64\xca\xf9\x9a\xea\xa0\xd5\xe4\x8f\x7b\xc7\x8e\x1a\x95\x11\xd3\x2c\x92\xf3\xf2\x20\xff\x0e\x00\x00\xff\xff\x62\xbb\x33\xf3\x2e\x05\x00\x00")

func internalTemplateCmdRpcserverTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCmdRpcserverTmpl,
		"internal/template/cmd/rpcserver.tmpl",
	)
}

func internalTemplateCmdRpcserverTmpl() (*asset, error) {
	bytes, err := internalTemplateCmdRpcserverTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/cmd/rpcserver.tmpl", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1698637526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCommonCommonTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xc9\x4c\xe2\xe2\x2a\xa9\x2c\x48\x55\x08\x4a\x2d\x2e\xc8\xcf\x2b\x4e\x55\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xe2\x74\xce\x4f\x49\x55\xc8\xcc\x2b\x31\x36\x52\x50\x48\xc8\x2a\xce\xcf\xb3\x52\xd2\x55\x4a\xe0\xe2\xf4\x2d\x4e\x57\x00\x29\xcb\xcc\x4b\x47\x16\xaf\xe5\x02\x04\x00\x00\xff\xff\x61\x7c\x35\xd7\x56\x00\x00\x00")

func internalTemplateCommonCommonTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCommonCommonTmpl,
		"internal/template/common/common.tmpl",
	)
}

func internalTemplateCommonCommonTmpl() (*asset, error) {
	bytes, err := internalTemplateCommonCommonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/common/common.tmpl", size: 86, mode: os.FileMode(420), modTime: time.Unix(1688218986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateCommonPingTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\x56\xd0\x0b\x4e\x2d\x2a\x4b\x2d\xf2\x4b\xcc\x4d\x55\xa8\xad\xe5\xe2\x2a\xa9\x2c\x48\x55\xd0\xe0\xe2\x0c\xc8\xcc\x4b\x0f\x48\x2c\x4a\xcc\x2d\x56\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xe2\xac\xe5\x82\x48\x04\xa5\x16\x17\xa0\x08\x6b\x72\x01\x02\x00\x00\xff\xff\x75\x59\xa0\xe1\x53\x00\x00\x00")

func internalTemplateCommonPingTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateCommonPingTmpl,
		"internal/template/common/ping.tmpl",
	)
}

func internalTemplateCommonPingTmpl() (*asset, error) {
	bytes, err := internalTemplateCommonPingTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/common/ping.tmpl", size: 83, mode: os.FileMode(420), modTime: time.Unix(1688218986, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateConfigConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x6f\xd3\x40\x10\xbd\xfb\x57\x8c\xcc\x99\xc8\x4e\x4a\x3e\xf6\x56\x8a\x10\x48\x05\xaa\x36\x12\x07\xc4\x61\x9b\x9d\x24\x2b\x6d\xbc\x66\x77\x93\x50\x2c\x4b\x54\x20\x21\x55\x42\x80\x04\x07\xb8\x21\xd1\x72\xaa\xc2\x81\x13\x17\xfe\x0c\xa4\xe9\xbf\x40\xbb\xeb\xc4\x29\xb8\xbd\x70\xf2\xec\x9b\xf1\x3c\xbf\x79\xe3\xcd\x32\xe0\x7d\xa8\x75\xa5\x14\xba\xb6\x2d\x07\x03\x54\x90\xe7\x81\x70\x11\x09\x00\xae\x6d\xe3\x04\x05\x44\x70\xf6\xfd\xeb\xfc\xf9\xf1\xd9\xa7\x97\x10\x2f\x4e\x4f\xe6\x47\xc7\x50\x3f\x7f\xf5\x7a\x71\x72\x68\xa1\xc6\xf9\xfb\x8f\x8b\xd9\x0c\x36\x16\xa7\x27\xbf\xdf\x1d\xc1\x8d\xf9\x9b\xb7\x67\x5f\x7e\x40\xf3\xd7\xcf\xcf\xf3\xc3\x19\xb4\x16\xdf\x5e\x2c\x66\x1f\x02\x80\x9e\x4c\xb4\x14\xb8\x37\x94\x53\x02\x46\x8d\xb1\xc4\x1c\x13\x01\x68\x05\x00\x7d\x2e\xf0\xa1\xe2\x06\x09\x40\x9f\x0a\x8d\x05\xb6\x5e\x33\x1a\x0b\xc3\x6f\x97\x85\xcb\xba\x15\x5e\x14\xb7\x82\x2c\x03\x4c\x98\x15\x16\x5c\x10\x7c\xc7\x98\x14\xf2\x7c\x68\x4c\xba\x87\x6a\xe2\x15\xa7\x52\x19\x02\xed\xa8\x1d\xd9\x43\xaa\x64\xdf\x9d\xda\x17\xbb\x94\x4d\x76\xd3\xde\x96\xe0\x98\x98\x3c\x0f\xd4\x32\xb6\x8d\x7a\x2e\xba\x4f\x47\x48\x20\xcc\x32\xa8\x79\x0e\x0b\x40\x9e\x87\x01\xc0\x3e\xd5\xb8\x43\xcd\xb0\xc8\x6f\xa6\x69\x91\x50\x38\xe0\xda\xa0\xda\x11\xe3\x01\x4f\x08\x84\x4e\x53\x2a\x70\x3d\xe9\xdb\x69\x4b\x05\x70\x1d\xc2\xb8\xde\xaa\x45\xb5\xa8\x16\x93\x76\xbb\xd3\xb1\x95\x7d\xca\xc5\x2e\x1a\x75\x70\x4f\x32\x3b\x89\x86\xe3\x14\x34\xe9\x61\x81\xd4\x9d\x60\x29\xf6\xf8\x33\x24\x10\x07\x59\x86\x09\xab\x50\xe8\xb9\xbc\xc2\x72\x54\x7a\x25\xe8\x32\x85\xff\x29\xa4\xde\x68\x75\xae\x1c\x14\x65\x4c\x11\x08\xc3\xd2\xb7\x76\xa7\x53\xfa\x16\xbb\x63\xa5\xa8\x5b\x37\xf3\x3c\x60\xfb\x96\x94\xed\x77\x0f\x52\x2b\x61\x74\xa0\x9f\x08\xdb\x6b\x44\x9f\x3e\x48\x31\xd9\x92\x49\x42\xa0\x1e\x79\xe4\x2e\x13\xe8\x91\x8d\x12\xe8\x72\x2b\x3e\x8e\x8a\x9a\x6d\xde\x2f\xa0\x46\xd3\x61\xc2\xef\xa0\x7d\x43\x0b\x39\xed\x0e\x15\xea\xa1\x14\x8c\x40\x18\x47\xd1\x48\x7b\x36\x3b\x05\x2f\x7f\xac\xd1\x0a\x52\x52\x9a\xd0\x01\x29\xd5\x7a\x2a\x95\x7d\x61\x19\xfa\xc4\x50\x6a\x43\xd6\x86\x55\x94\xbb\x29\x84\x8d\x46\xd4\xf4\x00\xa3\x86\xda\xf1\x11\x08\x97\x61\xe8\x3e\x86\x4e\x70\x39\xf1\x7f\x48\xaf\xa0\xbd\x8c\xb8\x82\xfa\x12\xf2\xea\x1d\x43\xc6\xb5\xdd\x2f\xfb\x24\x6e\x39\x18\xd7\x85\x2f\x54\xc8\xc4\x7f\xb5\xa1\xca\x6c\x3a\xcf\x1f\xad\xad\x49\xd3\xae\xc9\x63\xbb\x0e\x3d\xc3\x27\x2b\x3f\x38\x13\xab\x98\x8e\xdd\xf6\x84\xfe\xba\x49\xac\x47\x72\x6c\xd6\x5d\x50\x48\x59\x05\x3c\xb5\x97\x4b\x05\xce\x0b\xf3\x2f\xc0\x95\xd2\xba\x8a\xf6\x30\xcf\x03\x63\x9f\xce\x66\x99\x62\xe2\xd0\xd5\x15\xe8\x72\x57\xfd\x48\x7f\x0f\x9d\x34\xdb\x8d\xb8\x24\xfc\x13\x00\x00\xff\xff\xce\x3a\x22\xac\xc8\x05\x00\x00")

func internalTemplateConfigConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateConfigConfigTmpl,
		"internal/template/config/config.tmpl",
	)
}

func internalTemplateConfigConfigTmpl() (*asset, error) {
	bytes, err := internalTemplateConfigConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/config/config.tmpl", size: 1480, mode: os.FileMode(420), modTime: time.Unix(1709370043, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateGlobalGlobalTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\xcf\xc9\x4f\x4a\xcc\xe1\x02\x04\x00\x00\xff\xff\x32\x37\xa5\xbc\x0f\x00\x00\x00")

func internalTemplateGlobalGlobalTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateGlobalGlobalTmpl,
		"internal/template/global/global.tmpl",
	)
}

func internalTemplateGlobalGlobalTmpl() (*asset, error) {
	bytes, err := internalTemplateGlobalGlobalTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/global/global.tmpl", size: 15, mode: os.FileMode(420), modTime: time.Unix(1688218897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateInternalRouteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x31\x6b\x1b\x31\x1c\xc5\x67\xfd\x3f\x85\xaa\xe9\xce\xb4\xd2\x5e\x30\x5e\x5a\x6a\x43\xc1\x60\x17\x3a\xcb\x77\xb2\x2c\x7a\x27\x09\x59\x67\x0f\xc5\xd0\xa1\xf5\xd4\xd2\x42\xdd\xc9\x1d\x63\xf0\x12\x4c\xf0\x90\x10\x12\xf2\x69\x14\x3b\xdf\x22\x9c\xcf\x49\x9c\xcd\x19\xff\xe2\xbd\xa7\xdf\x7b\x96\x27\x5f\xb8\x14\xd8\x99\xc2\x0b\x00\x95\x5b\xe3\x3c\x8e\x00\x11\xa9\xfc\xa0\xe8\xd1\xc4\xe4\xcc\x0b\x9e\xbf\x49\xb9\x4e\x45\xa6\x8c\x66\xd2\x1c\x1c\xdc\xda\x4c\x25\xdc\x2b\xa3\xc9\xf1\xae\xc4\xe8\xbe\x92\x2f\x30\x0c\x85\x1b\x09\xc7\x06\xde\x5b\x96\xab\x34\xcd\xc4\x98\x3b\x41\x00\x95\xe0\x4a\xcb\xee\x98\x4b\x29\x1c\x3e\x3a\xaf\xd2\x13\x88\x01\xfa\x85\x4e\x70\x4b\x2b\xdf\x29\x47\x88\x62\xfc\x15\x50\x8f\x0f\xc5\xee\x74\xf8\x6d\x1d\x1f\x94\xa4\x4d\xef\x6d\x77\x47\x13\xc5\xb4\x92\x44\x31\x20\xd5\xc7\x55\x29\xfa\x41\xf8\xf7\x7a\x14\xc5\xf8\x55\x1d\x13\xeb\x4c\x5a\x24\xbb\x75\xca\x58\xc4\x18\xbe\x5d\x2f\xc3\xf4\xe7\x1e\x00\xd0\xc1\x57\xa5\x35\x22\x0f\x6c\xac\x46\x5e\xe3\xe7\xf5\xe8\x67\xc7\x6d\x93\xeb\x34\x13\x2e\x06\x84\x9e\x96\xa0\x1f\x8d\x6c\x49\x6d\x9c\xe8\x88\x61\x91\xf9\x88\xd0\x5a\xe3\x31\x89\xd6\x1a\x24\xc6\x8c\xe1\x70\x73\xbd\xf9\xb7\xd8\x3f\x87\xbf\xbf\xc2\xe5\x2c\x7c\xbb\x02\x34\x01\x28\xd1\xc2\xef\x55\xf8\xbf\xdc\xae\x16\xe1\xe4\x7b\x85\xb9\x99\x5f\x84\x1f\xeb\x70\xfa\xe7\x6e\x3e\xdd\x9e\xaf\x36\xb3\x33\xfc\xa9\xfd\xae\x0d\x80\x9c\xf0\x85\xd3\x30\x81\xfb\x00\x00\x00\xff\xff\xb1\x60\xe5\x15\x43\x02\x00\x00")

func internalTemplateInternalRouteTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateInternalRouteTmpl,
		"internal/template/internal/route.tmpl",
	)
}

func internalTemplateInternalRouteTmpl() (*asset, error) {
	bytes, err := internalTemplateInternalRouteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/internal/route.tmpl", size: 579, mode: os.FileMode(420), modTime: time.Unix(1709368339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateInternalRpcapiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\xe5\xe2\x2a\xa9\x2c\x48\x55\x08\x2a\x48\x76\x2c\xc8\x54\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\xbd\xf9\x40\x98\x29\x00\x00\x00")

func internalTemplateInternalRpcapiTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateInternalRpcapiTmpl,
		"internal/template/internal/rpcapi.tmpl",
	)
}

func internalTemplateInternalRpcapiTmpl() (*asset, error) {
	bytes, err := internalTemplateInternalRpcapiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/internal/rpcapi.tmpl", size: 41, mode: os.FileMode(420), modTime: time.Unix(1688218897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\xaa\xae\x56\xd0\x0b\x80\xc8\xf8\x25\xe6\xa6\x2a\xd4\xd6\xea\x27\xe7\xa6\x28\x71\x71\xa5\x95\xe6\x25\x83\xd5\x6a\x68\x2a\x54\x73\x71\x26\xe7\xa6\xe8\xb9\x56\xa4\x26\x97\x96\xa4\x6a\x68\x72\xd5\x72\x01\x02\x00\x00\xff\xff\x12\xa7\xcc\x37\x4e\x00\x00\x00")

func internalTemplateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplateMainTmpl,
		"internal/template/main.tmpl",
	)
}

func internalTemplateMainTmpl() (*asset, error) {
	bytes, err := internalTemplateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/template/main.tmpl", size: 78, mode: os.FileMode(420), modTime: time.Unix(1688218897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/template/boot/boot.tmpl":       internalTemplateBootBootTmpl,
	"internal/template/cmd/apiserver.tmpl":   internalTemplateCmdApiserverTmpl,
	"internal/template/cmd/cobra.tmpl":       internalTemplateCmdCobraTmpl,
	"internal/template/cmd/rpcserver.tmpl":   internalTemplateCmdRpcserverTmpl,
	"internal/template/common/common.tmpl":   internalTemplateCommonCommonTmpl,
	"internal/template/common/ping.tmpl":     internalTemplateCommonPingTmpl,
	"internal/template/config/config.tmpl":   internalTemplateConfigConfigTmpl,
	"internal/template/global/global.tmpl":   internalTemplateGlobalGlobalTmpl,
	"internal/template/internal/route.tmpl":  internalTemplateInternalRouteTmpl,
	"internal/template/internal/rpcapi.tmpl": internalTemplateInternalRpcapiTmpl,
	"internal/template/main.tmpl":            internalTemplateMainTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"boot": &bintree{nil, map[string]*bintree{
				"boot.tmpl": &bintree{internalTemplateBootBootTmpl, map[string]*bintree{}},
			}},
			"cmd": &bintree{nil, map[string]*bintree{
				"apiserver.tmpl": &bintree{internalTemplateCmdApiserverTmpl, map[string]*bintree{}},
				"cobra.tmpl":     &bintree{internalTemplateCmdCobraTmpl, map[string]*bintree{}},
				"rpcserver.tmpl": &bintree{internalTemplateCmdRpcserverTmpl, map[string]*bintree{}},
			}},
			"common": &bintree{nil, map[string]*bintree{
				"common.tmpl": &bintree{internalTemplateCommonCommonTmpl, map[string]*bintree{}},
				"ping.tmpl":   &bintree{internalTemplateCommonPingTmpl, map[string]*bintree{}},
			}},
			"config": &bintree{nil, map[string]*bintree{
				"config.tmpl": &bintree{internalTemplateConfigConfigTmpl, map[string]*bintree{}},
			}},
			"global": &bintree{nil, map[string]*bintree{
				"global.tmpl": &bintree{internalTemplateGlobalGlobalTmpl, map[string]*bintree{}},
			}},
			"internal": &bintree{nil, map[string]*bintree{
				"route.tmpl":  &bintree{internalTemplateInternalRouteTmpl, map[string]*bintree{}},
				"rpcapi.tmpl": &bintree{internalTemplateInternalRpcapiTmpl, map[string]*bintree{}},
			}},
			"main.tmpl": &bintree{internalTemplateMainTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
